<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Saadat Qadri</title><link href="http://saadatqadri.com/" rel="alternate"></link><link href="http://saadatqadri.com/feeds/all.atom.xml" rel="self"></link><id>http://saadatqadri.com/</id><updated>2014-12-05T19:30:00+01:00</updated><entry><title>Django Resources</title><link href="http://saadatqadri.com/django-resources.html" rel="alternate"></link><updated>2014-05-26T10:20:00+02:00</updated><author><name>Saadat Qadri</name></author><id>tag:saadatqadri.com,2014-05-26:django-resources.html</id><summary type="html">&lt;p&gt;Inspired by &lt;a href="http://eddychan.com/post/15775730174/how-i-learnt-enough-python-django-to-be-dangerous-in-1"&gt;Eddy Chan's list&lt;/a&gt;, I wanted to put together a list of Django resources that I used to learn the framework, and continue to reference today.&lt;/p&gt;
&lt;h2&gt;Beginner&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.djangobook.com/en/2.0/"&gt;Django Book&lt;/a&gt; - outdated now, needs to be rewritten for Django 1.6&lt;/p&gt;
&lt;p&gt;&lt;a href="http://lightbird.net/dbe/"&gt;Django By Example&lt;/a&gt; - also needs updating, but a good selection of projects to try out&lt;/p&gt;
&lt;h2&gt;Moderate&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.tangowithdjango.com/"&gt;Tango with Django&lt;/a&gt; - full example, written in Django 1.5, easy to follow, brilliant. One of the best tutorials out there.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://effectivedjango.com/tutorial/"&gt;Effective Django Tutorial&lt;/a&gt; - written by an EventBrite engineer, love the section on Class-based Views&lt;/p&gt;
&lt;h2&gt;Advanced&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://glynjackson.org/weblog/entry/django-angular.html"&gt;AngularJS and Django&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;** in progress&lt;/p&gt;</summary><category term="django"></category><category term="resources"></category></entry><entry><title>Getting started with GitHub Pages and Pelican</title><link href="http://saadatqadri.com/github-pages-pelican-blogging.html" rel="alternate"></link><updated>2014-05-22T10:20:00+02:00</updated><author><name>Saadat Qadri</name></author><id>tag:saadatqadri.com,2014-05-22:github-pages-pelican-blogging.html</id><summary type="html">&lt;p&gt;I started writing a blog earlier this year, with the intention of capturing my ideas and &lt;em&gt;fleeting&lt;/em&gt; thoughts. I initially started a Tumblr blog, wasn't too happy with the themes available for free, and then switched over to &lt;a href="svbtle.com"&gt;Svbtle&lt;/a&gt;, a new, minimalist writing platform by Dustin Curtis. I was really excited about the minimalist feel of Svbtle at first, and some of the people I'm following (Nima Gardideh (Frank &amp;amp; Oak)) maintained a Svbtle blog. However, the lack of certain features - adding Disqus comments, and the ability to modify the base Svbtle theme was a bit limiting. I wanted people to comment on my articles. I wanted to elicit discussion. &lt;/p&gt;
&lt;p&gt;Long story short - I moved my content from Svbtle to Medium, and I started looking at options for hosting a "landing page" for myself. I played around with Ghost and Wordpress, but I just wanted a simple way to get my content online. After a bit of research, GitHub Pages was what I was looking for. &lt;/p&gt;
&lt;p&gt;I followed directions on these three articles to get my Pelican blog running on GitHub pages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://martinbrochhaus.com/pelican2.html"&gt;Pelican and GitHub Pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://terriyu.info/blog/posts/2013/07/pelican-setup/"&gt;How I Set Up Pelican&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages"&gt;GitHub Help&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;** More details soon.&lt;/p&gt;</summary><category term="pelican"></category><category term="publishing"></category></entry><entry><title>Crossing the chasm, laggards first</title><link href="http://saadatqadri.com/crossing-chasm-laggards-first.html" rel="alternate"></link><updated>2014-12-05T19:30:00+01:00</updated><author><name>Saadat Qadri</name></author><id>tag:saadatqadri.com,2014-01-22:crossing-chasm-laggards-first.html</id><summary type="html">&lt;p&gt;In 1962, the sociologist Everett Rogers published the Diffusion of Innovations, a theory that attempted to explain how, why, and at what rate new ideas and technology spread through cultures. Rogers used the term diffusion to explain how innovations are communicated through certain channels over time among the members of a social system. He postulated the four main elements that influence the spread of a new idea: the innovation, the communication channels, time, and a social system. Rogers is also credited with identifying four categories of adopters of innovation (in addition to the innovators themselves):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The Early Adopters: the visionaries, individuals who easily accept the product or idea&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Early Majority: the pragmatists, individuals who will not try something until someone else has tried and tested the product&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Late Majority: the skeptics, individuals who only welcome the idea long after the majority have accepted.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Laggards: individuals who have no choice but to accept the product.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Geoffrey Moore extended Roger’s theory to the marketing of technology products in his book, Crossing the Chasm. Moore argued that there exists a chasm between the early adopters (the visionaries) and the early majority (the pragmatists), and only once the innovators have successfully convinced both these groups to believe in their idea will the innovation actually have the potential for success. The market penetration required in order to cross the chasm is usually around 15-18% (what Malcolm Gladwell referred to as the ‘tipping point’). Moore also suggested that marketers focus on one group of customers at a time, using each group as a base for marketing to the next.&lt;/p&gt;
&lt;p&gt;Most innovators choose to start their marketing efforts with the early adopters, before moving onto the early majority - simply because it’s the easy and natural thing to do. Early adopters get the idea easily, and they’ll download the app or cheer you on because they’re excited to be a part of something innovative. Early adopters are also happy to provide feedback on your product, which is why they’re the perfect test market for customer development. The early majority, on the other hand, are tougher to attract and retain as customers, and need a lot more coaxing before they see value in the innovation. &lt;/p&gt;
&lt;p&gt;I think that when you’re building something that is completely disruptive, you need to go further. This sounds crazy - but I think that sometimes there is value in going after the laggards first. Find your most difficult customer, the hardest target market. Your most critical, most demanding, most obstinate customer. Sell the idea to them, and you’ll win half the battle. Why do this, given that laggards only comprise 14% of our population? I think there’s value - because when attempting to craft the marketing message for the laggards, you’ll have to dig deep to find out exactly what makes your product unique and innovative. You’ll have to work harder than ever to convince that particular segment of the population. You’ll end up doing all the work required to convince the early majority that you’re really onto something new and exciting.&lt;/p&gt;
&lt;p&gt;I’m planning on using this approach as I’m building Tryst - a recommendations engine for dates, events, and activities in the city where you live. My goal is to find my most difficult customer - folks who don’t even use smartphones - and convince that they could use a service to help them find relevant date ideas in the city where they live.&lt;/p&gt;
&lt;p&gt;Some may call it a total waste of time. I call it doing the hard work first. &lt;/p&gt;
&lt;p&gt;I’d really appreciate your thoughts on &lt;a href="http://www.datesbytryst.com"&gt;Tryst&lt;/a&gt; - here’s a survey that I could use your help on. &lt;/p&gt;
&lt;p&gt;Thanks for reading.&lt;/p&gt;</summary><category term="Lean"></category><category term="Customer Development"></category></entry><entry><title>Don't Build Until They Come</title><link href="http://saadatqadri.com/dont-build-until-they-come.html" rel="alternate"></link><updated>2014-12-05T19:30:00+01:00</updated><author><name>Saadat Qadri</name></author><id>tag:saadatqadri.com,2014-01-22:dont-build-until-they-come.html</id><summary type="html">&lt;p&gt;I just finished re-reading The Startup Owner’s Manual by Steve Blank and Bob Dorf. This is the fourth time that I’ve gone through the chapter on building web/mobile products using Lean Customer Development, and yet again I was struck by how unintuitive the methodology is.&lt;/p&gt;
&lt;p&gt;As an engineer I’m trained to rush headlong into writing code or wiring blocks. But I’ve found out the hard way that not using lean techniques can be painful and a huge waste of time.&lt;/p&gt;
&lt;p&gt;For the millionth time, here’s the essence of Lean Customer Development: First find your target customers, get to the root of the problem, know the pain points - and only then start building. Hunches that lead to epiphanies such as: “I think there’s a need for a product that does X” are just hunches, and cannot be translated into business models - until and unless there’s enough validation from customers.&lt;/p&gt;
&lt;p&gt;So don’t build until they come. Or better yet - &lt;a href="http://paulgraham.com/ds.html"&gt;don’t build it until you know they will come&lt;/a&gt;.&lt;/p&gt;</summary><category term="Lean"></category><category term="Customer Development"></category></entry></feed>